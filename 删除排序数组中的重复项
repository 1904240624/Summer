/*
给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

示例 1:

给定数组 nums = [1,1,2], 
函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。
*/
int removeDuplicates(int* nums, int numsSize)
{
    int *q,i,j,k;
    if(numsSize==0) //数组为空，返回0
    {
        return 0;
    }
    q=(int *)malloc(sizeof(int )*numsSize);//该指针用来记下下一个不重复元素的位置
    k=1;
    q[0]=0;
    for(i=0;i<numsSize-1;i++)   //遍历数组nums
    {
        if(nums[i]!=nums[i+1])
        {
            j=i+1;
            q[k]=j;    //把位置j存放到数组q
            k++;
        }
    }
    for(i=0;i<k;i++)  //让nums前k个元素分别等于不重复元素
    {
        nums[i]=nums[q[i]];
    }
    return k;
}
